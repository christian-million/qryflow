[{"path":"https://christian-million.github.io/qryflow/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 qryflow authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://christian-million.github.io/qryflow/articles/advanced-qryflow.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Advanced Usage with qryflow","text":"qryflow() provides simple interface running tagged SQL workflows, advanced users may want control scripts parsed, executed, inspected. vignette demonstrates work lower-level building blocks qryflow: qryflow_run(): End--end parser + executor qryflow_results(): Extract query results qryflow_parse(): Split SQL structured chunks qryflow_execute(): Execute parsed chunks manually Internal object structures: qryflow_chunk, qryflow_workflow, qryflow_result","code":""},{"path":"https://christian-million.github.io/qryflow/articles/advanced-qryflow.html","id":"using-qryflow_run-and-qryflow_results","dir":"Articles","previous_headings":"","what":"Using qryflow_run() and qryflow_results()","title":"Advanced Usage with qryflow","text":"function qryflow_run() performs parsing execution SQL workflow, returning structured list (class qryflow_result). Unlike qryflow(), includes chunk metadata (just query results). extract query results (.e., returned qryflow()), use: default, query chunks returned named list. Set simplify = TRUE return single result one chunk present.","code":"con <- example_db_connect(mtcars) path <- example_sql_path(\"mtcars.sql\")  obj <- qryflow_run(path, con)  # A qryflow_result object class(obj) #> [1] \"qryflow_result\" names(obj) #> [1] \"drop_cyl_6\" \"prep_cyl_6\" \"df_mtcars\"  \"df_cyl_6\"   \"meta\"  # Each element is a qryflow_chunk class(obj$df_mtcars) #> [1] \"qryflow_chunk\" results <- qryflow_results(obj) head(results$df_mtcars) #>    mpg cyl disp  hp drat    wt  qsec vs am gear carb #> 1 21.0   6  160 110 3.90 2.620 16.46  0  1    4    4 #> 2 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4 #> 3 22.8   4  108  93 3.85 2.320 18.61  1  1    4    1 #> 4 21.4   6  258 110 3.08 3.215 19.44  1  0    3    1 #> 5 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2 #> 6 18.1   6  225 105 2.76 3.460 20.22  1  0    3    1"},{"path":"https://christian-million.github.io/qryflow/articles/advanced-qryflow.html","id":"parsing-and-executing-separately","dir":"Articles","previous_headings":"","what":"Parsing and Executing Separately","title":"Advanced Usage with qryflow","text":"advanced introspection, can manually parse execute SQL chunks.","code":""},{"path":"https://christian-million.github.io/qryflow/articles/advanced-qryflow.html","id":"step-1-parse-a-script","dir":"Articles","previous_headings":"Parsing and Executing Separately","what":"Step 1: Parse a script","title":"Advanced Usage with qryflow","text":"chunk structured object class qryflow_chunk, containing: type (e.g., \"query\") name (e.g., \"df_mtcars\") sql (SQL code) tags (additional tags)","code":"workflow <- qryflow_parse(path)  class(workflow) #> [1] \"qryflow_workflow\" length(workflow$chunks) #> [1] 4 workflow$chunks[[1]] #> <qryflow_chunk> drop_cyl_6 #>  #> [exec] #>  #> DROP TABLE IF EXISTS cyl_6; #>  ..."},{"path":"https://christian-million.github.io/qryflow/articles/advanced-qryflow.html","id":"step-2-execute-the-workflow","dir":"Articles","previous_headings":"Parsing and Executing Separately","what":"Step 2: Execute the workflow","title":"Advanced Usage with qryflow","text":"Execution results stored inside chunk object, accessible via chunk$results.","code":"executed <- qryflow_execute(workflow, con, source = \"mtcars.sql\") class(executed) #> [1] \"qryflow_result\" names(executed) #> [1] \"drop_cyl_6\" \"prep_cyl_6\" \"df_mtcars\"  \"df_cyl_6\"   \"meta\""},{"path":"https://christian-million.github.io/qryflow/articles/advanced-qryflow.html","id":"inspecting-qryflow_result-objects","dir":"Articles","previous_headings":"","what":"Inspecting qryflow_result objects","title":"Advanced Usage with qryflow","text":"result qryflow_run() qryflow_execute() qryflow_result, behaves like list chunks plus metadata. can also use:","code":"head(executed$df_mtcars$results) #>    mpg cyl disp  hp drat    wt  qsec vs am gear carb #> 1 21.0   6  160 110 3.90 2.620 16.46  0  1    4    4 #> 2 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4 #> 3 22.8   4  108  93 3.85 2.320 18.61  1  1    4    1 #> 4 21.4   6  258 110 3.08 3.215 19.44  1  0    3    1 #> 5 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2 #> 6 18.1   6  225 105 2.76 3.460 20.22  1  0    3    1 executed$df_mtcars$tags #> list() executed$meta$timings #>                 chunk       start_time         end_time #> 1          drop_cyl_6       1752876418       1752876418 #> 2          prep_cyl_6       1752876418       1752876418 #> 3           df_mtcars       1752876418       1752876418 #> 4            df_cyl_6       1752876418       1752876418 #> 5 overall_qryflow_run 1752876418.04994 1752876418.05161 executed$meta$source #> [1] \"mtcars.sql\" summary(executed) #> <qryflow_result> #> Chunks executed: 4  #> Available objects: drop_cyl_6, prep_cyl_6, df_mtcars, df_cyl_6, meta"},{"path":[]},{"path":"https://christian-million.github.io/qryflow/articles/advanced-qryflow.html","id":"qryflow_chunk","dir":"Articles","previous_headings":"Understanding the Underlying Objects","what":"qryflow_chunk","title":"Advanced Usage with qryflow","text":"Created new_qryflow_chunk(). Structure:","code":"list(   type = \"query\",   name = \"df_mtcars\",   sql = \"SELECT * FROM mtcars\",   tags = list(source = \"mtcars\"),   results = data.frame(...) )"},{"path":"https://christian-million.github.io/qryflow/articles/advanced-qryflow.html","id":"qryflow_workflow","dir":"Articles","previous_headings":"Understanding the Underlying Objects","what":"qryflow_workflow","title":"Advanced Usage with qryflow","text":"Created qryflow_parse() - contains parsed qryflow_chunk objects optionally original SQL script (source).","code":"workflow$chunks[[1]]  # Each is a qryflow_chunk workflow$source       # Entire original SQL text"},{"path":"https://christian-million.github.io/qryflow/articles/advanced-qryflow.html","id":"qryflow_result","dir":"Articles","previous_headings":"Understanding the Underlying Objects","what":"qryflow_result","title":"Advanced Usage with qryflow","text":"Created qryflow_execute() qryflow_run() - essentially qryflow_workflow plus execution metadata (meta) filled results.","code":"executed$meta$timings executed$meta$source"},{"path":"https://christian-million.github.io/qryflow/articles/advanced-qryflow.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Advanced Usage with qryflow","text":"Use tools need: Direct access parsed chunks (qryflow_parse) Programmatic control execution (qryflow_execute) Access timing SQL source metadata (qryflow_result) Selective re-execution filtering chunks See “Extending qryflow” (vignette(\"extend-qryflow\", package = \"qryflow\")) vignette registering custom chunk types defining new behaviors.","code":""},{"path":"https://christian-million.github.io/qryflow/articles/extend-qryflow.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Extending qryflow Functionality","text":"qryflow designed easily extended allows users define custom chunk types. vignette provides relevant background knowledge qryflow works hood, walks create register custom chunk types. vignette assumes knowledge found “Getting Started” (vignette(\"getting-started\", package = \"qryflow\")) “Advanced Usage” (vignette(\"advanced-qryflow\", package = \"qryflow\")) vignettes.","code":""},{"path":"https://christian-million.github.io/qryflow/articles/extend-qryflow.html","id":"big-picture-how-qryflow-works","dir":"Articles","previous_headings":"","what":"Big Picture: How qryflow Works","title":"Extending qryflow Functionality","text":"run SQL script using qryflow, process follows steps: Split SQL script chunks using tagged comments (e.g., -- @query: name) Identify type chunk Parse chunk structured object using type-specific parser Execute chunk using type-specific handler support new chunk type, ’ll need : Create parser — converts chunk raw SQL structured qryflow_chunk object. Create handler — defines execute chunk return results. Register new type qryflow package knows process .","code":""},{"path":"https://christian-million.github.io/qryflow/articles/extend-qryflow.html","id":"creating-parsers-and-handlers","dir":"Articles","previous_headings":"","what":"Creating Parsers and Handlers","title":"Extending qryflow Functionality","text":"chunk type needs associated parser associated handler. section outlines arguments custom parser handler functions need accept, operations perform, results return.","code":""},{"path":"https://christian-million.github.io/qryflow/articles/extend-qryflow.html","id":"parsers","dir":"Articles","previous_headings":"Creating Parsers and Handlers","what":"Parsers","title":"Extending qryflow Functionality","text":"parser accepts unaltered SQL statement chunk return formal qryflow_chunk object. Parsers executed single chunk time. sqflow_chunk object essentially list form : parser must extract type, name, main SQL statement, additional tags. package provides helpers . example, “exec” type parser looks like, informative comments: Note: package includes helper functions like read_sql_lines(), extract_all_tags(), subset_tags(), is_tag_line(), others make parsing easier.","code":"list(   type = type,   name = name,   sql = sql,   tags = tags,   results = results # Not populated until after execution ) qryflow_exec_parser <- function(x, ...) {    # Get a character vector containing each line   lines <- read_sql_lines(x)    # Identify any formal qryflow tags   all_tags <- extract_all_tags(lines)    # Check to see if an explicit name tag exists for the chunk   name <- all_tags$name    # If an explicit name tag doesn't exist, use the value from the \"exec\" tag   # This is how aliases are implemented   if(is.null(name)) {     name <- all_tags[[\"exec\"]]   }    # Find any additional tags beyond alias, name, or type   tags <- subset_tags(all_tags, c(\"exec\", \"name\", \"type\"), negate = TRUE)    # Collapse the SQL into a single character   sql_txt <- collapse_sql_lines(lines[!is_tag_line(lines)])    # Return the structured object   new_qryflow_chunk(type = \"exec\", name = name, sql = sql_txt, tags = tags)  }"},{"path":"https://christian-million.github.io/qryflow/articles/extend-qryflow.html","id":"handlers","dir":"Articles","previous_headings":"Creating Parsers and Handlers","what":"Handlers","title":"Extending qryflow Functionality","text":"Handlers accepts qryflow_chunk object database connection object (e.g., DBI::dbConnect). execute SQL appropriate return result: handler “exec” type: custom parser handler created, need registered.","code":"qryflow_exec_handler <- function(chunk, con, ...) {      # Pass the SQL of the chunk to desired execution strategy   result <- DBI::dbExecute(con, chunk$sql, ...)    # Return the result   result }"},{"path":"https://christian-million.github.io/qryflow/articles/extend-qryflow.html","id":"validate-the-parser-and-handler","dir":"Articles","previous_headings":"Creating Parsers and Handlers","what":"Validate the Parser and Handler","title":"Extending qryflow Functionality","text":"qryflow provides two functions test whether parser handler functions meet specifications. error occur : object function formal arguments included formal arguments right order Note: obviously test code within function correct test output function expected produce.","code":"validate_qryflow_parser(qryflow_exec_parser) validate_qryflow_handler(qryflow_exec_handler)"},{"path":"https://christian-million.github.io/qryflow/articles/extend-qryflow.html","id":"how-the-registry-works","dir":"Articles","previous_headings":"","what":"How the Registry Works","title":"Extending qryflow Functionality","text":"qryflow maintains two internal environments: .qryflow_parsers chunk parsers .qryflow_handlers chunk handlers package loaded, default types like “query” “exec” automatically registered. can register additional types using: can access types registered: Custom types must re-registered session. make persistent, add registration calls .Rprofile (see: Managing R Startup), create small package .onLoad() hook (see: R Packages (2e)).","code":"# Register separately register_qryflow_parser(\"custom\", my_custom_parser_func, overwrite = TRUE) register_qryflow_handler(\"custom\", my_custom_handler_func, overwrite = TRUE)  # Or register both at once register_qryflow_type(   \"custom\",   parser = my_custom_parser_func,   handler = my_custom_handler_func,   overwrite = TRUE ) ls_qryflow_parsers() ls_qryflow_handlers() ls_qryflow_types()"},{"path":"https://christian-million.github.io/qryflow/articles/extend-qryflow.html","id":"toy-example-1-create-query-send-chunk-type","dir":"Articles","previous_headings":"","what":"Toy Example #1: Create query-send Chunk Type","title":"Extending qryflow Functionality","text":"example shows implement new chunk type ’s similar exec query. create new type, called query-send works like query except calls DBI::dbSendQuery instead DBI::dbGetQuery. First, create parser handler: , register : Check registered properly: test SQL:","code":"query_send_parser <- function(x, ...) {    # Convert to individual lines   lines <- read_sql_lines(x)    all_tags <- extract_all_tags(lines)    # Check for explicit name   name <- all_tags$name    if (is.null(name)) {     # Accomodate Aliased Approach     name <- all_tags[[\"query-send\"]]   }    other_tags <- subset_tags(all_tags, c(\"query-send\", \"name\", \"type\"), negate = TRUE)    sql_txt <- paste0(lines[!is_tag_line(lines)], collapse = \"\\n\")    new_qryflow_chunk(type = \"query-send\", name = name, sql = sql_txt, tags = other_tags)  }  query_send_handler <- function(chunk, con, ...){   res <- DBI::dbSendQuery(con, chunk$sql, ...)    results <- DBI::dbFetch(res)      DBI::dbClearResult(res)      results } register_qryflow_type(   \"query-send\",   parser = query_send_parser,   handler = query_send_handler,   overwrite = TRUE ) #> [1] TRUE ls_qryflow_types() #> [1] \"exec\"       \"query\"      \"query-send\" # Creates an in-memory sqlite database and populates it with an mtcars table, named \"mtcars\"  con <- example_db_connect(mtcars)  # Create  sql <- \" -- @query-send: df_mtcars SELECT * FROM mtcars; \"  results <- qryflow(sql, con)  head(results) #>    mpg cyl disp  hp drat    wt  qsec vs am gear carb #> 1 21.0   6  160 110 3.90 2.620 16.46  0  1    4    4 #> 2 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4 #> 3 22.8   4  108  93 3.85 2.320 18.61  1  1    4    1 #> 4 21.4   6  258 110 3.08 3.215 19.44  1  0    3    1 #> 5 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2 #> 6 18.1   6  225 105 2.76 3.460 20.22  1  0    3    1"},{"path":"https://christian-million.github.io/qryflow/articles/extend-qryflow.html","id":"exercise-implement-an-include-chunk-type","dir":"Articles","previous_headings":"","what":"Exercise: Implement an include Chunk Type","title":"Extending qryflow Functionality","text":"Want try extending qryflow ? Implement custom “include” chunk type loads SQL separate file injects chunk. example, take following statement: Assuming mysql.sql contains: create parser handler functionally, gets returned : word caution: may trickier think given chunks currently implemented.","code":"-- @include: mysql.sql  -- @query: my_df SELECT * FROM table -- @query: mysql SELECT * INTO table FROM another_table -- @query: mysql SELECT * INTO table FROM another_table  -- @query: my_df SELECT * FROM table"},{"path":"https://christian-million.github.io/qryflow/articles/qryflow.html","id":"what-is-qryflow","dir":"Articles","previous_headings":"","what":"What is qryflow?","title":"Getting Started with qryflow","text":"qryflow package lets tag sections SQL, called chunks, R knows execute part independently. Tagging SQL lets : Keep multiple SQL statements file. Control SQL executed (e.g., DBI::dbGetQuery(), dbExecute()) Attach names results, ’re returned named R objects Pass metadata can used later R workflows short: can define run multi-step SQL workflows one function call, get results back structured R object. vignette covers: tag SQL chunks different types tags supported qryflow defines handles chunk","code":""},{"path":"https://christian-million.github.io/qryflow/articles/qryflow.html","id":"basic-usage","dir":"Articles","previous_headings":"","what":"Basic usage","title":"Getting Started with qryflow","text":"main function qryflow, accepts SQL tagged special comments connection DBI-compliant database. Note, SQL can character vector, like example , filepath file contains SQL. run qryflow(), ’s happens: SQL script split chunks using tag lines like -- @query: df_mtcars. chunk assigned type (e.g., query exec) Chunks executed order, query results returned named objects","code":"library(qryflow)  # Connection to In-Memory DB with table populated from mtcars con <- example_db_connect(mtcars)  sql <- \" -- @exec: drop_cyl_6 DROP TABLE IF EXISTS cyl_6;  -- @exec: prep_cyl_6 CREATE TABLE cyl_6 AS SELECT * FROM mtcars WHERE cyl = 6;  -- @query: df_mtcars SELECT * FROM mtcars;  -- @query: df_cyl_6 SELECT * FROM cyl_6; \"  # Pass tagged SQL to `qryflow` results <- qryflow(sql, con)  # Access the results from the chunk named `df_cyl_6` head(results$df_cyl_6) #>    mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> 1 21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> 2 21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> 3 21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> 4 18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> 5 19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> 6 17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4"},{"path":"https://christian-million.github.io/qryflow/articles/qryflow.html","id":"simplify-true","dir":"Articles","previous_headings":"","what":"Simplify = TRUE","title":"Getting Started with qryflow","text":"default, qryflow() return single data.frame (opposed named list results) one chunk argument simplify=TRUE. example: design choice facilitate easy interactive use common use-case. qryflow() might return named list single data.frame depending input, qryflow exports functions users can prioritize reliability return objects. See help pages ?qryflow_run() ?qryflow_results(). check Advanced Usage vignette.","code":"library(qryflow)  # Connection to In-Memory DB with table populated from mtcars con <- example_db_connect(mtcars)  sql <- \" -- @query: df_mtcars SELECT * FROM mtcars; \"  # Pass tagged SQL to `qryflow` results <- qryflow(sql, con)  # Access the results from the chunk named `df_cyl_6` # results$df_cyl_6 head(results) #>    mpg cyl disp  hp drat    wt  qsec vs am gear carb #> 1 21.0   6  160 110 3.90 2.620 16.46  0  1    4    4 #> 2 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4 #> 3 22.8   4  108  93 3.85 2.320 18.61  1  1    4    1 #> 4 21.4   6  258 110 3.08 3.215 19.44  1  0    3    1 #> 5 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2 #> 6 18.1   6  225 105 2.76 3.460 20.22  1  0    3    1"},{"path":"https://christian-million.github.io/qryflow/articles/qryflow.html","id":"tagging-syntax","dir":"Articles","previous_headings":"","what":"Tagging syntax","title":"Getting Started with qryflow","text":"tag specific chunk SQL, use following format: -- @key: value. example, indicate following chunk SQL query, meaning expect return data.frame calling DBI::dbGetQuery, precede statment special comment: Breaking tag ’s component parts: tag begins two dashes (--). indicates single line comment SQL. Next, use @ symbol indicate start tag, followed tag type. Currently, qryflow formally supports four tags: type, name, query, exec. follow tag type colon (:). Next comes value, depending type tag. @type: tag, indicate “type” SQL chunk. name, query, exec tags, value indicates custom name SQL chunk.","code":"-- @query: my_data_frame SELECT * FROM TBL WHERE COLUMN = 'VALUE'"},{"path":"https://christian-million.github.io/qryflow/articles/qryflow.html","id":"tags-and-aliases","dir":"Articles","previous_headings":"","what":"Tags and Aliases","title":"Getting Started with qryflow","text":"SQL chunk must tagged qryflow knows handle . Tags use SQL-style comments (--) follow format:","code":"-- @<tag>: <value>"},{"path":"https://christian-million.github.io/qryflow/articles/qryflow.html","id":"common-tags","dir":"Articles","previous_headings":"Tags and Aliases","what":"Common Tags","title":"Getting Started with qryflow","text":"@type Specifies execution type (-- @type: query) @name Assigns name chunk’s result (-- @name: df_users) @query Executes SQL DBI::dbGetQuery() names result (-- @query: df_users) @exec Executes SQL DBI::dbExecute() (-- @exec: drop_table) @query @exec aliases setting @type @name one line. Aliased form (preferred): Explicit form (equivalent):","code":"-- @query: df_mtcars SELECT * FROM mtcars; -- @type: query -- @name: df_mtcars SELECT * FROM mtcars;"},{"path":"https://christian-million.github.io/qryflow/articles/qryflow.html","id":"custom-tags","dir":"Articles","previous_headings":"Tags and Aliases","what":"Custom Tags","title":"Getting Started with qryflow","text":"can include additional tags (e.g., -- @source: users) carry metadata R workflow. one execution-related tag required per chunk (@query, @exec, @type).","code":""},{"path":"https://christian-million.github.io/qryflow/articles/qryflow.html","id":"defining-a-chunk","dir":"Articles","previous_headings":"","what":"Defining a Chunk","title":"Getting Started with qryflow","text":"qryflow, Chunk logically grouped section SQL code, representing single executable unit within larger multi-step SQL workflow. SQL script split multiple chunks using specially formatted tag lines (SQL comments beginning tags like – @query: – @exec:). scans SQL lines splits script tagged lines, grouping subsequent SQL lines next tag end script.","code":""},{"path":"https://christian-million.github.io/qryflow/articles/qryflow.html","id":"how-splitting-works","dir":"Articles","previous_headings":"Defining a Chunk","what":"How Splitting Works","title":"Getting Started with qryflow","text":"Tagged lines act markers start new chunk. lines following tag line belong chunk another tag line starts next chunk. script starts without tags, entire script treated one single chunk. ’s one tag somewhere script, script split two chunks: Everything tag becomes first chunk (even untagged). tagged line everything become second chunk.","code":""},{"path":"https://christian-million.github.io/qryflow/articles/qryflow.html","id":"examples","dir":"Articles","previous_headings":"Defining a Chunk","what":"Examples","title":"Getting Started with qryflow","text":"Example 1 - Script tags Result - entire script one chunk containing lines. ? Without tags, qryflow treats whole script single step. Example 2 - Script one tag start Result - One chunk starting tag, containing rest script. tag line 1, chunk starts continues end. Example 3 - Script one tag middle Result - Two chunks: Chunk 1: lines tag (untagged SQL). Chunk 2: tag line end. preserves pre-tag SQL separate chunk. Example 4 - Script multiple tags Result - Three chunks, starting respective tag line. chunk parsed executed independently sequence.","code":"CREATE TABLE cyl_6 AS SELECT * FROM mtcars WHERE cyl = 6; -- @query: get_6cyl SELECT * FROM mtcars WHERE cyl = 6; SELECT * FROM mtcars WHERE cyl = 6;  -- @query: df_mtcars SELECT * FROM mtcars; -- @exec: drop_cyl_6 DROP TABLE IF EXISTS cyl_6;  -- @exec: prep_cyl_6 CREATE TABLE cyl_6 AS SELECT * FROM mtcars WHERE cyl = 6;  -- @query: df_mtcars SELECT * FROM mtcars;  -- @query: df_cyl_6 SELECT * FROM cyl_6"},{"path":"https://christian-million.github.io/qryflow/articles/qryflow.html","id":"type-identification","dir":"Articles","previous_headings":"","what":"Type Identification","title":"Getting Started with qryflow","text":"chunk parsed executed, qryflow determines type using following rules: chunk includes explicit -- @type: tag, value used chunk type. @type: tag, qryflow checks tag (@query:, @exec:, etc.) matches registered type. first match found used type. recognized tag found, type defaults value getOption(\"qryflow.default.type\", \"query\"). Note formally, “query” default type qryflow option overridden.","code":""},{"path":"https://christian-million.github.io/qryflow/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Christian Million. Author, maintainer, copyright holder.","code":""},{"path":"https://christian-million.github.io/qryflow/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Million C (2025). qryflow: Execute Multi-Step 'SQL' Workflows. R package version 0.1.0, https://christian-million.github.io/qryflow/.","code":"@Manual{,   title = {qryflow: Execute Multi-Step 'SQL' Workflows},   author = {Christian Million},   year = {2025},   note = {R package version 0.1.0},   url = {https://christian-million.github.io/qryflow/}, }"},{"path":[]},{"path":"https://christian-million.github.io/qryflow/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Execute Multi-Step SQL Workflows","text":"Execute multi-step ‘SQL’ statements using specially formatted comments define control execution. qryflow lets define multi-step SQL workflows using comment-based tags SQL code. tags tell R execute SQL chunk name results. allows : Keep multiple SQL statements file. Control SQL “chunk” executed. Return results named R objects. Extend behavior using custom tags, parsers, handlers.","code":""},{"path":"https://christian-million.github.io/qryflow/index.html","id":"install","dir":"","previous_headings":"","what":"Install","title":"Execute Multi-Step SQL Workflows","text":"can install released version qryflow CRAN : development version GitHub :","code":"install.packages(\"qryflow\") # install.packages(\"devtools\") devtools::install_github(\"christian-million/qryflow\")"},{"path":"https://christian-million.github.io/qryflow/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Execute Multi-Step SQL Workflows","text":"code demonstrates primary use case qryflow. Basic Usage: path file containing SQL can also passed:","code":"library(qryflow)  # Connection to In-Memory DB with table populated from mtcars con <- example_db_connect(mtcars)  sql <- \" -- @exec: drop_cyl_6 DROP TABLE IF EXISTS cyl_6;  -- @exec: prep_cyl_6 CREATE TABLE cyl_6 AS SELECT * FROM mtcars WHERE cyl = 6;  -- @query: df_mtcars SELECT * FROM mtcars;  -- @query: df_cyl_6 SELECT * FROM cyl_6; \"  # Pass tagged SQL to `qryflow` results <- qryflow(sql, con)  # Access the results from the chunk named `df_cyl_6` head(results$df_cyl_6) #>    mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> 1 21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> 2 21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> 3 21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> 4 18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> 5 19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> 6 17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 filepath <- example_sql_path('mtcars.sql')  # Pass tagged SQL to `qryflow` results <- qryflow(filepath, con)  # Access the results from the chunk named `df_cyl_6` results$df_cyl_6 |>   head() #>    mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> 1 21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> 2 21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> 3 21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> 4 18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> 5 19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> 6 17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4"},{"path":"https://christian-million.github.io/qryflow/index.html","id":"additional-learning","dir":"","previous_headings":"","what":"Additional Learning","title":"Execute Multi-Step SQL Workflows","text":"Consider following vignettes depth understanding: Getting Started: Outlines available features, use qryflow, provides operational understanding works (vignette(\"getting-started\", package = \"qryflow\")). Advanced Usage: look hood objects classes power qryflow can get package (vignette(\"advanced-qryflow\", package = \"qryflow\")). Extend qryflow: guide understanding implement custom tags, override built-tags, using custom chunk parsers handlers (vignette(\"extend-qryflow\", package = \"qryflow\")).","code":""},{"path":"https://christian-million.github.io/qryflow/index.html","id":"similar-packages","dir":"","previous_headings":"","what":"Similar Packages","title":"Execute Multi-Step SQL Workflows","text":"functionality made available qryflow exists packages. However, scope implementation qryflow makes distinct enough justify unique package. recommend reviewing packages see works best needs. feel list incomplete, please submit issue: sqlhelper provides comprehensive tools executing parameterized SQL scripts, managing database connections configurations, supporting spatial data types, statement-level control within SQL files.","code":""},{"path":"https://christian-million.github.io/qryflow/reference/collapse_sql_lines.html","id":null,"dir":"Reference","previous_headings":"","what":"Collapse SQL lines into single character — collapse_sql_lines","title":"Collapse SQL lines into single character — collapse_sql_lines","text":"thin wrapper around paste0(x, collapse = '\\\\n') standardize way qryflow collapses SQL lines.","code":""},{"path":"https://christian-million.github.io/qryflow/reference/collapse_sql_lines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collapse SQL lines into single character — collapse_sql_lines","text":"","code":"collapse_sql_lines(x)"},{"path":"https://christian-million.github.io/qryflow/reference/collapse_sql_lines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collapse SQL lines into single character — collapse_sql_lines","text":"x character vector SQL lines","code":""},{"path":"https://christian-million.github.io/qryflow/reference/collapse_sql_lines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collapse SQL lines into single character — collapse_sql_lines","text":"character vector length 1","code":""},{"path":"https://christian-million.github.io/qryflow/reference/collapse_sql_lines.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collapse SQL lines into single character — collapse_sql_lines","text":"","code":"path <- example_sql_path()  lines <- read_sql_lines(path)  sql <- collapse_sql_lines(lines)"},{"path":"https://christian-million.github.io/qryflow/reference/example_db_connect.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an example in-memory database — example_db_connect","title":"Create an example in-memory database — example_db_connect","text":"function creates connection -memory SQLite database, option add table database. function intended facilitate examples, vignettes, package tests.","code":""},{"path":"https://christian-million.github.io/qryflow/reference/example_db_connect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an example in-memory database — example_db_connect","text":"","code":"example_db_connect(df = NULL)"},{"path":"https://christian-million.github.io/qryflow/reference/example_db_connect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an example in-memory database — example_db_connect","text":"df Optional data.frame add database.","code":""},{"path":"https://christian-million.github.io/qryflow/reference/example_db_connect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an example in-memory database — example_db_connect","text":"connection DBI::dbConnect()","code":""},{"path":"https://christian-million.github.io/qryflow/reference/example_db_connect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an example in-memory database — example_db_connect","text":"","code":"con <- example_db_connect(mtcars)  x <- DBI::dbGetQuery(con, \"SELECT * FROM mtcars;\")  head(x) #>    mpg cyl disp  hp drat    wt  qsec vs am gear carb #> 1 21.0   6  160 110 3.90 2.620 16.46  0  1    4    4 #> 2 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4 #> 3 22.8   4  108  93 3.85 2.320 18.61  1  1    4    1 #> 4 21.4   6  258 110 3.08 3.215 19.44  1  0    3    1 #> 5 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2 #> 6 18.1   6  225 105 2.76 3.460 20.22  1  0    3    1  DBI::dbDisconnect(con)"},{"path":"https://christian-million.github.io/qryflow/reference/example_sql_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Get path to qryflow example SQL scripts — example_sql_path","title":"Get path to qryflow example SQL scripts — example_sql_path","text":"qryflow provides example SQL scripts inst/sql directory. Use function retrieve path example script. function intended facilitate examples, vignettes, package tests.","code":""},{"path":"https://christian-million.github.io/qryflow/reference/example_sql_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get path to qryflow example SQL scripts — example_sql_path","text":"","code":"example_sql_path(path = \"mtcars.sql\")"},{"path":"https://christian-million.github.io/qryflow/reference/example_sql_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get path to qryflow example SQL scripts — example_sql_path","text":"path filename example script.","code":""},{"path":"https://christian-million.github.io/qryflow/reference/example_sql_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get path to qryflow example SQL scripts — example_sql_path","text":"path example SQL script","code":""},{"path":"https://christian-million.github.io/qryflow/reference/example_sql_path.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get path to qryflow example SQL scripts — example_sql_path","text":"","code":"path <- example_sql_path(\"mtcars.sql\")  file.exists(path) #> [1] TRUE"},{"path":"https://christian-million.github.io/qryflow/reference/extract_all_tags.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract tagged metadata from a SQL chunk — extract_all_tags","title":"Extract tagged metadata from a SQL chunk — extract_all_tags","text":"extract_all_tags() scans SQL specially formatted comment tags (e.g., -- @tag: value) returns named list. exported intent useful users extending qryflow. typically used single SQL chunk, one parsed .sql file. Additional helpers like extract_tag(), extract_name(), extract_type() provide convenient access specific tag values. subset_tags() lets filter exclude tags name.","code":""},{"path":"https://christian-million.github.io/qryflow/reference/extract_all_tags.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract tagged metadata from a SQL chunk — extract_all_tags","text":"","code":"extract_all_tags(text, tag_pattern = \"^\\\\s*--\\\\s*@([^:]+):\\\\s*(.*)$\")  extract_tag(text, tag)  extract_name(text)  extract_type(text)  subset_tags(tags, keep, negate = FALSE)"},{"path":"https://christian-million.github.io/qryflow/reference/extract_all_tags.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract tagged metadata from a SQL chunk — extract_all_tags","text":"text character vector SQL lines file path SQL script. tag_pattern regular expression extracting tags. Defaults lines form -- @tag: value. tag character string naming tag extract (used extract_tag()). tags named list tags, typically extract_all_tags(). Used subset_tags(). keep character vector tag names keep exclude subset_tags(). negate Logical; TRUE, subset_tags() returns tags except listed keep.","code":""},{"path":"https://christian-million.github.io/qryflow/reference/extract_all_tags.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract tagged metadata from a SQL chunk — extract_all_tags","text":"extract_all_tags(): named list tags found SQL chunk. extract_tag(), extract_name(), extract_type(): single tag value (character NULL). subset_tags(): filtered named list tags NULL none remain.","code":""},{"path":"https://christian-million.github.io/qryflow/reference/extract_all_tags.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract tagged metadata from a SQL chunk — extract_all_tags","text":"formal type qryflow SQL chunk determined extract_type() using prioritized approach: chunk includes explicit -- @type: tag, value used directly chunk type. @type: tag absent, qryflow searches tags (e.g., @query:, @exec:) correspond registered chunk types ls_qryflow_types(). first matching tag found defines chunk type. neither explicit @type: tag recognized tag present, chunk type falls back default type returned qryflow_default_type().","code":""},{"path":[]},{"path":"https://christian-million.github.io/qryflow/reference/extract_all_tags.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract tagged metadata from a SQL chunk — extract_all_tags","text":"","code":"filepath <- example_sql_path('mtcars.sql') parsed <- qryflow_parse(filepath)  chunk <- parsed$chunks[[1]] tags <- extract_all_tags(chunk$sql)  extract_name(chunk$sql) #> NULL extract_type(chunk$sql) #> [1] \"query\" subset_tags(tags, keep = c(\"query\")) #> list()"},{"path":"https://christian-million.github.io/qryflow/reference/is_tag_line.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect the presence of a properly structured tagline — is_tag_line","title":"Detect the presence of a properly structured tagline — is_tag_line","text":"Checks whether specially structured comment line formatted way qryflow expects.","code":""},{"path":"https://christian-million.github.io/qryflow/reference/is_tag_line.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect the presence of a properly structured tagline — is_tag_line","text":"","code":"is_tag_line(line)"},{"path":"https://christian-million.github.io/qryflow/reference/is_tag_line.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect the presence of a properly structured tagline — is_tag_line","text":"line character vector check. vectorized function.","code":""},{"path":"https://christian-million.github.io/qryflow/reference/is_tag_line.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect the presence of a properly structured tagline — is_tag_line","text":"Logical. Indicating whether line matches tag specification.","code":""},{"path":"https://christian-million.github.io/qryflow/reference/is_tag_line.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Detect the presence of a properly structured tagline — is_tag_line","text":"Tag lines look like : -- @key: value Begins inline comment (--) @ precedes tag type (e.g., type, name, query, exec) followed colon (:) value provided","code":""},{"path":"https://christian-million.github.io/qryflow/reference/is_tag_line.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect the presence of a properly structured tagline — is_tag_line","text":"","code":"a <- \"-- @query: df_mtcars\" b <- \"-- @exec: prep_tbl\" c <- \"-- @type: query\"  lines <- c(a, b, c)  is_tag_line(lines) #> [1] TRUE TRUE TRUE"},{"path":"https://christian-million.github.io/qryflow/reference/ls_qryflow_types.html","id":null,"dir":"Reference","previous_headings":"","what":"List currently registered chunk types — ls_qryflow_handlers","title":"List currently registered chunk types — ls_qryflow_handlers","text":"Helper function access names currently registered chunk types. Functions available accessing just parsers just handlers.","code":""},{"path":"https://christian-million.github.io/qryflow/reference/ls_qryflow_types.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List currently registered chunk types — ls_qryflow_handlers","text":"","code":"ls_qryflow_handlers()  ls_qryflow_parsers()  ls_qryflow_types()"},{"path":"https://christian-million.github.io/qryflow/reference/ls_qryflow_types.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List currently registered chunk types — ls_qryflow_handlers","text":"Character vector registered chunk types","code":""},{"path":"https://christian-million.github.io/qryflow/reference/ls_qryflow_types.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"List currently registered chunk types — ls_qryflow_handlers","text":"ls_qryflow_types implemented return union results ls_qryflow_parsers ls_qryflow_handlers. expected parser handler exist type. assumption violated, ls_qryflow_types may suggest otherwise.","code":""},{"path":"https://christian-million.github.io/qryflow/reference/ls_qryflow_types.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List currently registered chunk types — ls_qryflow_handlers","text":"","code":"ls_qryflow_types() #> [1] \"exec\"  \"query\""},{"path":"https://christian-million.github.io/qryflow/reference/new_qryflow_chunk.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an instance of the qryflow_chunk class — new_qryflow_chunk","title":"Create an instance of the qryflow_chunk class — new_qryflow_chunk","text":"Create instance qryflow_chunk class","code":""},{"path":"https://christian-million.github.io/qryflow/reference/new_qryflow_chunk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an instance of the qryflow_chunk class — new_qryflow_chunk","text":"","code":"new_qryflow_chunk(   type = character(),   name = character(),   sql = character(),   tags = NULL,   results = NULL )"},{"path":"https://christian-million.github.io/qryflow/reference/new_qryflow_chunk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an instance of the qryflow_chunk class — new_qryflow_chunk","text":"type Character indicating type chunk (e.g., \"query\", \"exec\") name Name chunk sql SQL statement associated chunk tags Optional, additional tags included chunk results Optional, filled chunk execution","code":""},{"path":"https://christian-million.github.io/qryflow/reference/new_qryflow_chunk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an instance of the qryflow_chunk class — new_qryflow_chunk","text":"list-like object class qryflow_chunk","code":""},{"path":"https://christian-million.github.io/qryflow/reference/new_qryflow_chunk.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create an instance of the qryflow_chunk class — new_qryflow_chunk","text":"Exported users intending extend qryflow. Subsequent processes rely structure qryflow_chunk.","code":""},{"path":"https://christian-million.github.io/qryflow/reference/new_qryflow_chunk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an instance of the qryflow_chunk class — new_qryflow_chunk","text":"","code":"chunk <- new_qryflow_chunk(\"query\", \"df_name\", \"SELECT * FROM mtcars;\")"},{"path":"https://christian-million.github.io/qryflow/reference/qryflow.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a multi-step SQL workflow and return query results — qryflow","title":"Run a multi-step SQL workflow and return query results — qryflow","text":"qryflow() main entry point qryflow package. executes SQL workflow defined tagged .sql script character string returns query results R objects. SQL script can contain multiple steps tagged @query @exec. Query results captured returned named list, names correspond @query tags.","code":""},{"path":"https://christian-million.github.io/qryflow/reference/qryflow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a multi-step SQL workflow and return query results — qryflow","text":"","code":"qryflow(sql, con, ..., simplify = TRUE)"},{"path":"https://christian-million.github.io/qryflow/reference/qryflow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run a multi-step SQL workflow and return query results — qryflow","text":"sql file path .sql workflow character string containing SQL code. con database connection DBI::dbConnect() ... Additional arguments passed qryflow_run() qryflow_results(). simplify Logical; TRUE (default), list length 1 simplified single result object.","code":""},{"path":"https://christian-million.github.io/qryflow/reference/qryflow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run a multi-step SQL workflow and return query results — qryflow","text":"named list query results, single result simplify = TRUE one chunk exists.","code":""},{"path":"https://christian-million.github.io/qryflow/reference/qryflow.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run a multi-step SQL workflow and return query results — qryflow","text":"wrapper around combination qryflow_run(), always provides list results metadata, qryflow_results(), filters output qryflow_run() include results SQL.","code":""},{"path":[]},{"path":"https://christian-million.github.io/qryflow/reference/qryflow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run a multi-step SQL workflow and return query results — qryflow","text":"","code":"con <- example_db_connect(mtcars)  filepath <- example_sql_path(\"mtcars.sql\")  results <- qryflow(filepath, con)  head(results$df_mtcars) #>    mpg cyl disp  hp drat    wt  qsec vs am gear carb #> 1 21.0   6  160 110 3.90 2.620 16.46  0  1    4    4 #> 2 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4 #> 3 22.8   4  108  93 3.85 2.320 18.61  1  1    4    1 #> 4 21.4   6  258 110 3.08 3.215 19.44  1  0    3    1 #> 5 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2 #> 6 18.1   6  225 105 2.76 3.460 20.22  1  0    3    1  DBI::dbDisconnect(con)"},{"path":"https://christian-million.github.io/qryflow/reference/qryflow_default_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Access the default qryflow chunk type — qryflow_default_type","title":"Access the default qryflow chunk type — qryflow_default_type","text":"Retrieves value option qryflow.default.type, set. Otherwise returns \"query\", officially supported default type. value supplied function, returns value.","code":""},{"path":"https://christian-million.github.io/qryflow/reference/qryflow_default_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access the default qryflow chunk type — qryflow_default_type","text":"","code":"qryflow_default_type(type = getOption(\"qryflow.default.type\", \"query\"))"},{"path":"https://christian-million.github.io/qryflow/reference/qryflow_default_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Access the default qryflow chunk type — qryflow_default_type","text":"type Optional. type want return.","code":""},{"path":"https://christian-million.github.io/qryflow/reference/qryflow_default_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Access the default qryflow chunk type — qryflow_default_type","text":"Character. set, result qryflow.default.type option, otherwise \"query\" value passed type","code":""},{"path":"https://christian-million.github.io/qryflow/reference/qryflow_default_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Access the default qryflow chunk type — qryflow_default_type","text":"","code":"x <- getOption(\"qryflow.default.type\", \"query\")  y <- qryflow_default_type()  identical(x, y) #> [1] TRUE"},{"path":"https://christian-million.github.io/qryflow/reference/qryflow_execute.html","id":null,"dir":"Reference","previous_headings":"","what":"Execute a parsed qryflow SQL workflow — qryflow_execute","title":"Execute a parsed qryflow SQL workflow — qryflow_execute","text":"qryflow_execute() takes parsed workflow object (returned qryflow_parse()), executes chunk (e.g., @query, @exec), collects results timing metadata. function used internally qryflow_run(), can called directly concert qryflow_parse() want manually control parsing execution.","code":""},{"path":"https://christian-million.github.io/qryflow/reference/qryflow_execute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Execute a parsed qryflow SQL workflow — qryflow_execute","text":"","code":"qryflow_execute(x, con, ..., source = NULL)"},{"path":"https://christian-million.github.io/qryflow/reference/qryflow_execute.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Execute a parsed qryflow SQL workflow — qryflow_execute","text":"x parsed qryflow workflow object, typically created qryflow_parse() con database connection DBI::dbConnect() ... Reserved future use. source Optional; character string indicating source SQL include metadata.","code":""},{"path":"https://christian-million.github.io/qryflow/reference/qryflow_execute.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Execute a parsed qryflow SQL workflow — qryflow_execute","text":"object class qryflow_result, containing executed chunks results meta field includes timing source information.","code":""},{"path":[]},{"path":"https://christian-million.github.io/qryflow/reference/qryflow_execute.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Execute a parsed qryflow SQL workflow — qryflow_execute","text":"","code":"con <- example_db_connect(mtcars)  filepath <- example_sql_path(\"mtcars.sql\")  parsed <- qryflow_parse(filepath)  executed <- qryflow_execute(parsed, con, source = filepath)  DBI::dbDisconnect(con)"},{"path":"https://christian-million.github.io/qryflow/reference/qryflow_handler_exists.html","id":null,"dir":"Reference","previous_headings":"","what":"Check existence of a given handler in the registry — qryflow_handler_exists","title":"Check existence of a given handler in the registry — qryflow_handler_exists","text":"Checks whether specified handler exists handler registry environment.","code":""},{"path":"https://christian-million.github.io/qryflow/reference/qryflow_handler_exists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check existence of a given handler in the registry — qryflow_handler_exists","text":"","code":"qryflow_handler_exists(type)"},{"path":"https://christian-million.github.io/qryflow/reference/qryflow_handler_exists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check existence of a given handler in the registry — qryflow_handler_exists","text":"type chunk type check (e.g., \"query\", \"exec\")","code":""},{"path":"https://christian-million.github.io/qryflow/reference/qryflow_handler_exists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check existence of a given handler in the registry — qryflow_handler_exists","text":"Logical. type exist handler registry?","code":""},{"path":[]},{"path":"https://christian-million.github.io/qryflow/reference/qryflow_handler_exists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check existence of a given handler in the registry — qryflow_handler_exists","text":"","code":"qryflow_handler_exists(\"query\") #> [1] TRUE"},{"path":"https://christian-million.github.io/qryflow/reference/qryflow_parse.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse a SQL workflow into tagged chunks — qryflow_parse","title":"Parse a SQL workflow into tagged chunks — qryflow_parse","text":"qryflow_parse() reads SQL workflow file character vector parses discrete tagged chunks based @query, @exec, custom markers.","code":""},{"path":"https://christian-million.github.io/qryflow/reference/qryflow_parse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse a SQL workflow into tagged chunks — qryflow_parse","text":"","code":"qryflow_parse(sql)"},{"path":"https://christian-million.github.io/qryflow/reference/qryflow_parse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse a SQL workflow into tagged chunks — qryflow_parse","text":"sql file path SQL workflow file, character vector containing SQL lines.","code":""},{"path":"https://christian-million.github.io/qryflow/reference/qryflow_parse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse a SQL workflow into tagged chunks — qryflow_parse","text":"object class qryflow_workflow, structured list SQL chunks metadata.","code":""},{"path":"https://christian-million.github.io/qryflow/reference/qryflow_parse.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parse a SQL workflow into tagged chunks — qryflow_parse","text":"function used internally qryflow_run(), can also used directly preprocess inspect structure SQL workflow.","code":""},{"path":[]},{"path":"https://christian-million.github.io/qryflow/reference/qryflow_parse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse a SQL workflow into tagged chunks — qryflow_parse","text":"","code":"filepath <- example_sql_path(\"mtcars.sql\")  parsed <- qryflow_parse(filepath)"},{"path":"https://christian-million.github.io/qryflow/reference/qryflow_parser_exists.html","id":null,"dir":"Reference","previous_headings":"","what":"Check existence of a given parser in the registry — qryflow_parser_exists","title":"Check existence of a given parser in the registry — qryflow_parser_exists","text":"Checks whether specified parser exists parser registry environment.","code":""},{"path":"https://christian-million.github.io/qryflow/reference/qryflow_parser_exists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check existence of a given parser in the registry — qryflow_parser_exists","text":"","code":"qryflow_parser_exists(type)"},{"path":"https://christian-million.github.io/qryflow/reference/qryflow_parser_exists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check existence of a given parser in the registry — qryflow_parser_exists","text":"type chunk type check (e.g., \"query\", \"exec\")","code":""},{"path":"https://christian-million.github.io/qryflow/reference/qryflow_parser_exists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check existence of a given parser in the registry — qryflow_parser_exists","text":"Logical. type exist parser registry?","code":""},{"path":[]},{"path":"https://christian-million.github.io/qryflow/reference/qryflow_parser_exists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check existence of a given parser in the registry — qryflow_parser_exists","text":"","code":"qryflow_parser_exists(\"query\") #> [1] TRUE"},{"path":"https://christian-million.github.io/qryflow/reference/qryflow_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract results from a qryflow_workflow object — qryflow_results","title":"Extract results from a qryflow_workflow object — qryflow_results","text":"qryflow_results() retrieves query results list returned qryflow_run(), typically one includes parsed executed SQL chunks.","code":""},{"path":"https://christian-million.github.io/qryflow/reference/qryflow_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract results from a qryflow_workflow object — qryflow_results","text":"","code":"qryflow_results(x, ..., simplify = FALSE)"},{"path":"https://christian-million.github.io/qryflow/reference/qryflow_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract results from a qryflow_workflow object — qryflow_results","text":"x Results qryflow_run(), usually containing mixture qryflow_chunk objects. ... Reserved future use. simplify Logical; TRUE, simplifies result single object one query chunk present. Defaults FALSE.","code":""},{"path":"https://christian-million.github.io/qryflow/reference/qryflow_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract results from a qryflow_workflow object — qryflow_results","text":"named list query results, single result object simplify = TRUE one result present.","code":""},{"path":[]},{"path":"https://christian-million.github.io/qryflow/reference/qryflow_results.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract results from a qryflow_workflow object — qryflow_results","text":"","code":"con <- example_db_connect(mtcars)  filepath <- example_sql_path(\"mtcars.sql\")  obj <- qryflow_run(filepath, con)  results <- qryflow_results(obj)  DBI::dbDisconnect(con)"},{"path":"https://christian-million.github.io/qryflow/reference/qryflow_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse and execute a tagged SQL workflow — qryflow_run","title":"Parse and execute a tagged SQL workflow — qryflow_run","text":"qryflow_run() reads SQL workflow file path character string, parses tagged statements, executes statements database connection. function typically used internally qryflow(), can also called directly control workflow execution.","code":""},{"path":"https://christian-million.github.io/qryflow/reference/qryflow_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse and execute a tagged SQL workflow — qryflow_run","text":"","code":"qryflow_run(sql, con, ...)"},{"path":"https://christian-million.github.io/qryflow/reference/qryflow_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse and execute a tagged SQL workflow — qryflow_run","text":"sql character string representing either path .sql file raw SQL content. con database connection DBI::dbConnect() ... Additional arguments passed qryflow_execute().","code":""},{"path":"https://christian-million.github.io/qryflow/reference/qryflow_run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse and execute a tagged SQL workflow — qryflow_run","text":"list representing evaluated workflow, containing query results, execution metadata, , depending contents SQL script.","code":""},{"path":[]},{"path":"https://christian-million.github.io/qryflow/reference/qryflow_run.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse and execute a tagged SQL workflow — qryflow_run","text":"","code":"con <- example_db_connect(mtcars)  filepath <- example_sql_path(\"mtcars.sql\")  obj <- qryflow_run(filepath, con)  obj$df_mtcars$sql #> [1] \"SELECT *\\nFROM mtcars;\\n\" obj$df_mtcars$results #>     mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> 1  21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> 2  21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> 3  22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> 4  21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> 5  18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> 6  18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> 7  14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> 8  24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> 9  22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> 10 19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> 11 17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> 12 16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> 13 17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> 14 15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> 15 10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> 16 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> 17 14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> 18 32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> 19 30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> 20 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> 21 21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> 22 15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> 23 15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> 24 13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #> 25 19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #> 26 27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> 27 26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> 28 30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> 29 15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #> 30 19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 #> 31 15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 #> 32 21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2  results <- qryflow_results(obj)  head(results$df_mtcars$results) #> NULL  DBI::dbDisconnect(con)"},{"path":"https://christian-million.github.io/qryflow/reference/read_sql_lines.html","id":null,"dir":"Reference","previous_headings":"","what":"Standardizes lines read from string, character vector, or file — read_sql_lines","title":"Standardizes lines read from string, character vector, or file — read_sql_lines","text":"generic function ensure lines read file, single character vector, already parsed lines return format. helps avoid re-reading entire texts enabling already read lines pass easily. useful folks may want extend qryflow.","code":""},{"path":"https://christian-million.github.io/qryflow/reference/read_sql_lines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standardizes lines read from string, character vector, or file — read_sql_lines","text":"","code":"read_sql_lines(x)"},{"path":"https://christian-million.github.io/qryflow/reference/read_sql_lines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standardizes lines read from string, character vector, or file — read_sql_lines","text":"x filepath character vector containing SQL","code":""},{"path":"https://christian-million.github.io/qryflow/reference/read_sql_lines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standardizes lines read from string, character vector, or file — read_sql_lines","text":"qryflow_sql object (inherits character) length equal number lines read","code":""},{"path":"https://christian-million.github.io/qryflow/reference/read_sql_lines.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Standardizes lines read from string, character vector, or file — read_sql_lines","text":"","code":"# From a file ##### path <- example_sql_path() read_sql_lines(path) #> <qryflow_sql> #> -- @exec: drop_cyl_6 #> DROP TABLE IF EXISTS cyl_6; #>  #> -- @exec: prep_cyl_6 #> CREATE TABLE cyl_6 AS #> SELECT * #> FROM mtcars #> WHERE cyl = 6; #>  #> -- @query: df_mtcars #> SELECT * #> FROM mtcars; #>  #> -- @query: df_cyl_6 #> SELECT * #> FROM cyl_6;  # From a single string ##### sql <- \"SELECT * FROM mtcars;\" read_sql_lines(sql) #> <qryflow_sql> #> SELECT * #> FROM mtcars;  # From a character ##### lines <- c(\"SELECT *\", \"FROM mtcars;\") read_sql_lines(lines) #> <qryflow_sql> #> SELECT * #> FROM mtcars;"},{"path":"https://christian-million.github.io/qryflow/reference/register_qryflow_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Register custom chunk types — register_qryflow_type","title":"Register custom chunk types — register_qryflow_type","text":"Use functions register parsers handlers associated custom types. register_qryflow_type wrapper around register_qryflow_parser register_qryflow_handler.","code":""},{"path":"https://christian-million.github.io/qryflow/reference/register_qryflow_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Register custom chunk types — register_qryflow_type","text":"","code":"register_qryflow_type(type, parser, handler, overwrite = FALSE)  register_qryflow_parser(type, parser, overwrite = FALSE)  register_qryflow_handler(type, handler, overwrite = FALSE)"},{"path":"https://christian-million.github.io/qryflow/reference/register_qryflow_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Register custom chunk types — register_qryflow_type","text":"type Character indicating chunk type (e.g., \"exec\", \"query\") parser function parse SQL associated type. Must accept arguments \"x\" \"...\" return qryflow_chunk object. handler function execute SQL associated type. Must accept arguments \"chunk\", \"con\", \"...\". overwrite Logical. Overwrite existing parser handler, exists?","code":""},{"path":"https://christian-million.github.io/qryflow/reference/register_qryflow_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Register custom chunk types — register_qryflow_type","text":"Logical. Indicating whether types successfully registered.","code":""},{"path":"https://christian-million.github.io/qryflow/reference/register_qryflow_type.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Register custom chunk types — register_qryflow_type","text":"avoid manually registering custom type session, consider adding registration code .Rprofile creating package leverages .onLoad()","code":""},{"path":"https://christian-million.github.io/qryflow/reference/register_qryflow_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Register custom chunk types — register_qryflow_type","text":"","code":"# Create custom parser ##### custom_parser <- function(x, ...){   # Custom parsing code will go here    # new_qryflow_chunk(type = \"custom\", name = name, sql = sql_txt, tags = tags) }  # Create custom handler ##### custom_handler <- function(chunk, con, ...){   # Custom execution code will go here...   # return(result) }  # Register Separately ##### register_qryflow_parser(\"custom\", custom_parser, overwrite = TRUE) #> [1] TRUE  register_qryflow_handler(\"custom\", custom_handler, overwrite = TRUE) #> [1] TRUE   # Register Simultaneously ##### register_qryflow_type(\"query-send\", custom_parser, custom_handler, overwrite = TRUE) #> [1] TRUE"},{"path":"https://christian-million.github.io/qryflow/reference/validate_qryflow_handler.html","id":null,"dir":"Reference","previous_headings":"","what":"Ensure correct handler structure — validate_qryflow_handler","title":"Ensure correct handler structure — validate_qryflow_handler","text":"function checks passed object function contains arguments \"chunk\", \"con, \"...\" - order. help ensure users register valid handlers.","code":""},{"path":"https://christian-million.github.io/qryflow/reference/validate_qryflow_handler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ensure correct handler structure — validate_qryflow_handler","text":"","code":"validate_qryflow_handler(handler)"},{"path":"https://christian-million.github.io/qryflow/reference/validate_qryflow_handler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ensure correct handler structure — validate_qryflow_handler","text":"handler object check","code":""},{"path":"https://christian-million.github.io/qryflow/reference/validate_qryflow_handler.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ensure correct handler structure — validate_qryflow_handler","text":"Logical. Generates error object pass criteria.","code":""},{"path":[]},{"path":"https://christian-million.github.io/qryflow/reference/validate_qryflow_handler.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ensure correct handler structure — validate_qryflow_handler","text":"","code":"custom_func <- function(chunk, con, ...){    # Parsing Code Goes Here  }  validate_qryflow_handler(custom_func)"},{"path":"https://christian-million.github.io/qryflow/reference/validate_qryflow_parser.html","id":null,"dir":"Reference","previous_headings":"","what":"Ensure correct parser structure — validate_qryflow_parser","title":"Ensure correct parser structure — validate_qryflow_parser","text":"function checks passed object function contains arguments \"x\" \"...\" - order. help ensure users register valid parsers.","code":""},{"path":"https://christian-million.github.io/qryflow/reference/validate_qryflow_parser.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ensure correct parser structure — validate_qryflow_parser","text":"","code":"validate_qryflow_parser(parser)"},{"path":"https://christian-million.github.io/qryflow/reference/validate_qryflow_parser.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ensure correct parser structure — validate_qryflow_parser","text":"parser object check","code":""},{"path":"https://christian-million.github.io/qryflow/reference/validate_qryflow_parser.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ensure correct parser structure — validate_qryflow_parser","text":"Logical. Generates error object pass criteria.","code":""},{"path":[]},{"path":"https://christian-million.github.io/qryflow/reference/validate_qryflow_parser.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ensure correct parser structure — validate_qryflow_parser","text":"","code":"custom_func <- function(x, ...){    # Parsing Code Goes Here  } validate_qryflow_parser(custom_func)"},{"path":"https://christian-million.github.io/qryflow/news/index.html","id":"qryflow-010","dir":"Changelog","previous_headings":"","what":"qryflow 0.1.0","title":"qryflow 0.1.0","text":"CRAN release: 2025-07-18 Initial CRAN submission.","code":""}]
